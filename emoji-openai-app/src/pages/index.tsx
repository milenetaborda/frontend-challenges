import Head from "next/head";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { EmojiData } from "./api/get-emojis";
import styled from "../styles/Home.module.css";
import { Loading } from "@/components/Loading";

export default function Home() {
  const { register, handleSubmit } = useForm();
  const [emojisData, setEmojisData] = useState<EmojiData[] | null>(null);
  const [loading, setLoading] = useState(false);

  const getEmojis = async (prompt: string) => {
    setLoading(true);

    try {
      const response = await fetch("/api/get-emojis", {
        method: "POST",
        body: JSON.stringify({ prompt }),
      });
      const data = await response.json();
      setEmojisData(data.emojisOptions);
      setLoading(false);
    } catch (error) {
      setLoading(false);
      setEmojisData(null);
    }
  };

  const onSubmit = (data: any) => {
    if (!data.prompt || loading) return;

    getEmojis(data.prompt);
  };

  return (
    <>
      <Head>
        <title>Emoji OpenAI App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styled.main}>
        <div className={styled.circle} />
        <div className={styled.smallCircle} />
        <h1 className={styled.title}>Emoji OpenAI App</h1>
        <h2 className={styled.subtitle}>
          Descreva o emoji ou emoticon que vocÃª gostaria de encontrar
        </h2>

        <form onSubmit={handleSubmit(onSubmit)} className={styled.form}>
          <input
            {...register("prompt")}
            placeholder="People smiling"
            className={styled.input}
            autoComplete="off"
          />
          <button type="submit" className={styled.button}>
            Buscar
          </button>
        </form>

        <ul className={styled["list-container"]}>
          {loading ? (
            <Loading />
          ) : (
            emojisData &&
            emojisData?.map((emoji) => (
              <li key={emoji.name} className={styled["list-item"]}>
                <span>{emoji.icon}</span>
                <p>:{emoji.name}:</p>
              </li>
            ))
          )}
        </ul>

        {!loading && !emojisData && (
          <p className={styled["no-emoji"]}>
            Ops, nenhum emoji foi encontrado, tente outra descriÃ§Ã£o ðŸ˜¢
          </p>
        )}
      </main>
    </>
  );
}
