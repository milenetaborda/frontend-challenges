import Head from "next/head";
import { useState } from "react";
import {
  Box,
  Button,
  CircularProgress,
  Container,
  TextField,
} from "@mui/material";
import { useForm } from "react-hook-form";
import { Magic } from "magic-sdk";

import styled from "../styles/Home.module.css";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const {
    handleSubmit,
    register,
    formState: { errors },
  } = useForm();

  const handleSubmitForm = async ({ email }: { email: string }) => {
    setLoading(true);

    const magic = new Magic(
      process.env.NEXT_PUBLIC_MAGIC_PUBLISHABLE_KEY || ""
    );
    const didToken = await magic.auth.loginWithMagicLink({ email });

    const res = await fetch("/api/login", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${didToken}`,
        body: JSON.stringify({ email }),
      },
    });

    if (res.status === 200) {
      console.log("success");
      setLoading(false);
    } else {
      console.log("error");
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styled.main}>
        <Container maxWidth="xs">
          <h1>Hello</h1>
          <br />
          <form onSubmit={handleSubmit(handleSubmitForm)}>
            <Box mb={2}>
              <TextField
                variant="outlined"
                label="email"
                fullWidth
                autoComplete="email"
                autoFocus
                {...register("email", {
                  required: "Required field",
                  pattern: {
                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                    message: "Invalid email address",
                  },
                })}
                error={!!errors?.email}
                //  @ts-ignore
                helperText={errors?.email ? errors?.email?.message : null}
              />
            </Box>
            <Button type="submit" variant="contained" color="primary" fullWidth>
              {loading ? (
                <CircularProgress size={24} color="info" />
              ) : (
                "Login In / Sign Up"
              )}
            </Button>
          </form>
        </Container>
      </main>
    </>
  );
}
